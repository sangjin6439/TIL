프록시와 @Transactional: 트랜잭션은 크게 선언적 트렌젝션과 코드로 구현하는 프로그래밍적 트랜잭션이 있다. 트렌잭션은 시작할때 프록시 객체를 만들어 실행한다. 프록시 객체가 @트랜잭션안의 메서드를 실행하다 오류가 나면 모두 롤백한다. 그리고 정상 작동하면 원래 객체로 커밋한다. 
길게 쓰자면 선언적 트랜잭션 관리 (Declarative Transaction Management)
1. 프록시 객체 생성:
    * 스프링은 AOP(Aspect-Oriented Programming) 기반으로 트랜잭션을 관리합니다.
    * @Transactional 애너테이션이 붙은 메서드가 있는 빈을 스프링이 초기화할 때, 해당 빈의 프록시 객체를 생성합니다.
    * 이 프록시는 실제 빈의 메서드를 호출하기 전에 트랜잭션 관련 로직을 실행합니다.
2. 메서드 실행:
    * 클라이언트가 @Transactional이 붙은 메서드를 호출하면, 프록시가 인터셉트합니다.
    * 프록시는 트랜잭션을 시작하고 원본 객체의 메서드를 호출합니다.
3. 트랜잭션 관리:
    * 메서드 실행 중 예외가 발생하면, 프록시는 트랜잭션을 롤백합니다.
    * 메서드가 정상적으로 완료되면, 프록시는 트랜잭션을 커밋합니다.
4. 예외 처리 및 롤백:
    * 기본적으로 @Transactional은 unchecked 예외(RuntimeException 및 그 하위 클래스)와 Error가 발생하면 롤백합니다.
    * checked 예외에 대해서는 롤백하지 않습니다. 그러나 필요에 따라 rollbackFor 속성을 사용하여 롤백 대상을 지정할 수 있습니다.

예시 
@Slf4j
@Service
@RequiredArgsConstructor
public class SomeService {

    private final SomeRepository someRepository;

    @Transactional
    public void targetMethod() {
        innerMethod();
    }

    @Transactional
    public void innerMethod() {
        someRepository.save(new Some("something!"));
    }
}

결론적으로 위의 트랜잭션은 실행되지 않는다. 위의 코드에서 targetMethod가 innerMethod를 호출한다. 
그러나 같은 클래스 내에서 직접 메서드 호출이 이루어져서 inner메서드 트랜잭션 설정은 무시된다. -> 프록시는 SomeService빈의 외부 호출을 가로채기 때문에,  내부 호출 시에는 트낸잭션이 적용되지 않는다. 
해결법: 각각 다른 클래스로 분리해서 주입받고 호출하면됨
