동시성문제 -> 경쟁조건(race condition)이 일어나는 환경  문제점: 값을 예상할 수 없다-> 원하는 값을 저장하거나 얻을 수 없다.

해결방법: 4가지 방법  스핀락: 한 프로세스나 스레드가 락을 취득해서 임계영역을 사용중이면 다른 프로세스나 스레드가 락을 취득하기 위해서 계속 시도를 하는 방법. -> 문제: 락을 취득하기 위해 cpu를 계속 사용함

뮤텍스: 스핀락의 cpu사용을 해결하기 위해서 Queue를 도입함. 누군가 임계영역(하나의 스레드만 사용가능)을 쓰고 있으면 Queue에 넣어서 기다리게함. 사용을 다하면 다음 Queue를 깨움-> cpu사용을 줄임.   뮤텍스가 항상 좋은가? : 멀티 코어 환경 + critical section의 작업이 contect switch보다 빨르면 스핀락이 좋다. 

세마포: 세모포는 여러개의 스레드가 임계영역에 들어갈 수 있고, 작업 순서를 정할 수 있다 -> 락을 획득하고 해제 하는 것을 여러 프로세스에서 할 수 있다.
 뮤텍스 vs 세마포 : 뮤텍스는 하나의 프로세스에서 락을 획득,해지할 수 있어서 우선순위가 낮은 프로세스가 락을 획득하게 된다면 우선순위가 높은 프로세스가 락을 획득한 우선순위가 낮은 프로세스에 의존성이 생기기 때문에 priority inheritance(우선순위 역전)이 있어 우선순위를 올려 빠르게 실행 시켜 락의 제어권을 넘기게 한다. 세마포는 여러 프로세스에서 락을 획득 해지를 할 수 있어 우선순위 역전이 필요없다.
== 상호 배제만 필요하면 뮤텍스
== 작업 간의 실행 순서를 정해줘야 한다면 세마포를 권장 
자바의 모든 클래스는 모니터를 가진다 == Synchronized 사용가능 	 
