대표적인 AOP→ @transaction

사용 이유: 핵심 기능과 부가 기능을 나누어 코드를 깔끔하게 유지할 수 있다.  서비스 메서드 호출 시간이나 리턴 값들을 로깅해 성능 모니터링과 디버그(코드에 오류가 있거나 가끔 오류가 생기는 코드를 찾아 관리할 수 있다.)를 할 수 있다.

기존에는 핵심 기능과 부가 기능을 한번에 적용해 왔다. 이러면 로깅이라는 부가기능을 핵심기능에 사용하려면 수많은 repositoy,service,controller에 각각 코드를 집어 넣어야해서 상당히 복잡했고 코드도 난잡해졌다. 100개의 클래스면 100개 이상의 부가 기능이 들어가야하니.. 하지만 진짜 문제는 수정과 확장성에 있다. 만약 서비스로직에만 로깅을 적용한다고하면 기존의 repository나 controller에 있던 로깅관련 로직은 일일이 빼야하니 말이다.

AOP는 핵심 기능과 부가 기능을 나누어 부가기능을 한곳에서 처리하여 원하는 곳에 부가 기능을 적용 가능하게 한다. @Aspect

의존성 추가
`implementation 'org.springframework.boot:spring-boot-starter-aop'`

AOP 용어 정리

조인 포인트(Join point): 어드바이스가 적용될 수 있는 위치, 메소드 실행, 생성자 호출, 필드 값 접근, static 메서드 접근과 같은 프로그램 실행 중 지점!→ 스프링 AOP는 프록시 방식을 사용하므로 조인 포인트는 항상 메서드 실행 지점으로 제한한다. 메서드가 실행될때 바로 적용된다.

포인트 컷(PointCut): 조인 포인트 중에서 어드바이스가 적용될 위치를 선별하는 기능→ 프록시를 사용하는 스프링 AOP는 메서드 실행 지점만 포인트 선별 가능

타겟: 어드바이스를 받는 객체, 포인트컷으로 결정

어드바이스: 부가 기능

애스팩트: 어드바이스 + 포인트 컷을 모듈화함→ @Aspect

🔎

**JoinPoint**

JoinPoint 인터페이스는 호출되는 대상 객체, 메서드, 전달 파라미터 목록에 접근 할 수 있는 메소드 제공

| 메서드 | 접근하는 영역 |
| --- | --- |
| Signature getSignature() | 호출되는 메서드에 대한 정보 |
| Object getTarget() | 대상 객체 |
| Object[] getArgs() | 파라미터 목록 |

org.aspectj.lang.Signature인터페이스는 호출되는 메서드와 관련된 정보를 제공

| 메서드 | 접근하는 영역 |
| --- | --- |
| String getName() | 메서드 이름 |
| String toLongName() | 메서드를 완전하게 표현한 문장(반환 타입, 파라미터 타입) |
| String getArgs() | 파라미터 목록 |

구현 시 주의 사항

JoinPoint를 파라미터로 전달 받을 경우 반드시 첫번째 파라미터로 지정해야한다 (그 회, 예외 발생)

**🔎ProceedingJoinPoint**

JoinPoint를 상속받은 객체(JoinPoint와Signature메서드를 이용할 수 있음)

ProceedingJoinPoint는 Around advice(@Around)에서만 지원되는 JoinPoint

Around Advice는 ProceedingJointPoint를 첫 번째 파라미터로 전달받음

Target Object의 메소드 정보를 포함(ProceedingJoinPoint.proceed()는 Target의 메소드 실행을 제어할 수 있음)
