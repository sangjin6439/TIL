QueryDSL은 SQL, JPQL 등을 코드로 작성할 수 있도록 해준다. 쿼리가 코드로 작성되기 때문에 코드 실행 시점에 자바컴파일러가 컴파일 해줘서 오류를 알아 낼 수 있다. 런타임 시점이 아닌 컴파일 시점에 오류를 알 수 있는 장점이 있다. 또한 자동으로 코드를 바인딩해주기 때문에 SQL Injection 공격에서도 안전을 보장받을 수 있다.

QueryDSL은 컴파일 단계에서 Entitiy를 기반으로 QClass를 생성하는데 JPAAnnotationProcessor가 컴파일 시점에 작동해서 @Entity 등등의 어노테이션을 찾아 해당 파일들을 분석해서 QClass를 만들어 줍니다. 이 Entity클래스와 매핑되는 QClass를 기반으로 쿼리를 실행한다.

# 사용법

### **기본 검색 쿼리****

`@Test`

`public void search() {` //Q클래스 생성 

`JPAQueryFactory queryFactory = new JPAQueryFactory(em);`

`Member findMember = queryFactory`

`.selectFrom(member)`

`.where(member.username.eq("member1")`

`.and(member.age.eq(10)))`

`.fetchOne();`

`assertThat(findMember.getUsername()).isEqualTo("member1");`

`}`

검색 조건은 `.and()` , . `or()` 를 메서드 체인으로 연결할 수 있다.

where()` 에 파라미터로 검색조건을 추가하면 `AND` 조건이 추가됨

이경우 `null` 값은무시 메서드추출을활용해서동적쿼리를깔끔하게만들수있음 뒤에서설명

### **JPQL이 제공하는 모든 검색 조건 제공**

`member.username.eq("member1") // username = 'member1'`

`member.username.ne("member1") //username != 'member1'`

`member.username.eq("member1").not() // username != 'member1'`

`member.username.isNotNull() //이름이 is not null`

`member.age.in(10, 20) // age in (10,20)`

`member.age.notIn(10, 20) // age not in (10, 20)`

`member.age.between(10,30) //between 10, 30`

`member.age.goe(30) // age >= 30`

`member.age.gt(30) // age > 30`

`member.age.loe(30) // age <= 30`

`member.age.lt(30) // age < 30`

`member.username.like("member%") //like 검색 member.username.contains("member") // like ‘%member%’ 검색 member.username.startsWith("member") //like ‘member%’ 검색 ...`

이렇게  대부분의 sql은 코드로 작성할 수 있게 지원한다. 

### **결과 조회**

``fetch()``: 리스트 조회, 데이터 없으면 빈 리스트 반환 ``fetchOne()`` : 단 건 조회

결과가 없으면 : ``null``

결과가 둘 이상이면 : ``com.querydsl.core.NonUniqueResultException``단건 조회에서 한 건 이상이면 예외 발생 -> ``fetchFirst()`` 처음 한 건 조회 or ``limit(1).fetchOne()``

``fetchResults()`` : 리스트 조회, `페이징에서 사용(따라서 fetch는 실행된 쿼리의 결과를 가져오는 데 사용되는 메서드이고, ResultFetch는 결과를 처리하고 다양한 방식으로 조작할 수 있는 타입) <-deprecated`

``fetchCount()`` : count 쿼리로 변경해서 count 수 조회 -> int or long 과 같은 자료형

## 코드로 보는 예시

### 정렬

`/* * 1.회원 정렬 순서(desc)`

`* 2.회원 이름 올림차순(asc)` 

`* 단 2에서 회원 이름이 없으면 마지막에 출력(nulls last)` 

`* */`

## QueryDSL이 제공하는 자료형

Tuple: `QueryDsl이 제공하는 Tuple자료형. 여러 개의 타입이 있을 때 꺼내올 수 있음`

`@Test`

`public void group() throws Exception {`

`List<Tuple> result = queryFactory`

`.select(*team*.name, *member*.age.avg())`

`.from(*member*)`

`.join(*member*.team, *team*)`

`.groupBy(*team*.name)`

`.fetch();`

`Tuple teamA = result.get(0);`

`Tuple teamB = result.get(1);`

`*assertThat*(teamA.get(*team*.name)).isEqualTo("teamA");`

`*assertThat*(teamA.get(*member*.age.avg())).isEqualTo(15); //(10 +20) / 2`

`*assertThat*(teamB.get(*team*.name)).isEqualTo("teamB");`

`*assertThat*(teamB.get(*member*.age.avg())).isEqualTo(35); //(30 +40) / 2`

`}`

위의 코드를 보면 여러 자료형(String 타입, int타입)을 불러온다. 이럴 때 Tuple을 사용하여 값을 받아 처리한다.

## Join

QueryDSL은 sql에서 사용하는 여러 join쿼리를 사용하다.

/*

* 연관관계 없는 엔티티 외부 조인

* 회원의 이름이 팀 이름과 같은 대상 외부 조인

* */

`@Test`

`public void join_on_no_filtering() {`

`em.persist(new Member("teamA"));`

`em.persist(new Member("teamB"));`

`em.persist(new Member("teamC"));`

`List<Tuple> result = queryFactory`

`.select(*member*, *team*)`

`.from(*member*)`

`//이 부분이 일반 조인과 다르게 엔티티가 하나만 들어감`

`.leftJoin(*team*).on(*member*.username.eq(*team*.name))`

`.fetch();`

`for (Tuple tuple : result) {`

`System.*out*.println("tuple = " + tuple);`

`}`

`}`

연관 관계가 없는 테이블 끼리의 조인도 가능하고 fetch join도 가능하다.

`@PersistenceUnit`

`EntityManagerFactory emf;`

`@Test`

`public void fetchJoinUse() {`

`em.flush();`

`em.clear();`

`Member findMember = queryFactory`

`.selectFrom(*member*)`

`.join(*member*.team, *team*).fetchJoin()`

`.where(*member*.username.eq("member1"))`

`.fetchOne();`

`boolean loaded = emf.getPersistenceUnitUtil().isLoaded(findMember.getTeam());`

`*assertThat*(loaded).as("페치 조인 적용").isTrue();`

`}`

## QueryDSL의 한계

QueryDSL을 사용하면 모든 sql 쿼리를 코드로 나타낼 수 있을 거 같지만 from 절의 서브 쿼리는 표현하지 못한다. from절 이외의 select, where 절의 서브 쿼리는 표현한다. 

해결방안: 

- `*서브쿼리를 join으로 변경한다.(가능한 상황이 많다. 불가능할 수도 있음.)*`
- `*애플리케이션에서 쿼리를 2번 분리해서 실행한다.*`
- `*최후로는 nativeSQL을 사용한다.*`
